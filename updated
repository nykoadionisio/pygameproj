import pygame
import random

#Setting Up Window
pygame.init()
win = pygame.display.set_mode((1440, 900))
pygame.display.set_caption("First Game")

#Sprites
backgrounds = ('Backdrop0.png', 'Backdrop1.png', 'Backdrop2.png')
walkRight = [pygame.image.load('WizardR0.png'),pygame.image.load('WizardR1.png'),pygame.image.load('WizardR2.png'),pygame.image.load('WizardR3.png'),pygame.image.load('WizardR4.png'),pygame.image.load('WizardR5.png'),pygame.image.load('WizardR6.png'),pygame.image.load('WizardR7.png'),pygame.image.load('WizardR8.png')]
walkLeft = [pygame.image.load('WizardL0.png'),pygame.image.load('WizardL1.png'),pygame.image.load('WizardL2.png'),pygame.image.load('WizardL3.png'),pygame.image.load('WizardL4.png'),pygame.image.load('WizardL5.png'),pygame.image.load('WizardL6.png'),pygame.image.load('WizardL7.png'),pygame.image.load('WizardL8.png')]
char = pygame.image.load('WizardR0.png')
backdrop = pygame.image.load(random.choice(backgrounds))

#Ingame Clock
clock = pygame.time.Clock()

#Class MC
class player(object):
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vel = 4
        self.isJump = False
        self.jumpCount = 10
        self.left = False
        self.right = False
        self.walkCount = 0
        self.standing = True
        self.box = (self.x + 15, self.y, 28, 64)

#Direction of Character
    def draw(self, win):
        if self.walkCount + 1 >= 27:
            self.walkCount = 0
        if not(self.standing):
            if self.left:
                win.blit(walkLeft[self.walkCount // 3], (self.x, self.y))
                self.walkCount += 1
            elif self.right:
                win.blit(walkRight[self.walkCount // 3], (self.x, self.y))
                self.walkCount += 1
        else:
            if self.right:
                win.blit(walkRight[0], (self.x, self.y))
            else:
                win.blit(walkLeft[0], (self.x, self.y))
        self.box = (self.x + 15, self.y, 28, 64)
        #pygame.draw.rect(win, (255, 0, 0), self.box, 2)

class enemy(object):
    walkRight = [pygame.image.load("BadR0.png"), pygame.image.load("BadR1.png"), pygame.image.load("BadR2.png"), pygame.image.load("BadR3.png"), pygame.image.load("BadR4.png"), pygame.image.load("BadR5.png"), pygame.image.load("BadR6.png"), pygame.image.load("BadR7.png"), pygame.image.load("BadR8.png")]
    walkLeft = [pygame.image.load("BadL0.png"), pygame.image.load("BadL1.png"), pygame.image.load("BadL2.png"), pygame.image.load("BadL3.png"), pygame.image.load("BadL4.png"), pygame.image.load("BadL5.png"), pygame.image.load("BadL6.png"), pygame.image.load("BadL7.png"), pygame.image.load("BadL8.png")]
    def __init__(self, x, y, width, height, stop):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.stop = stop
        self.walkCount = 0
        self.vel = 3
        self.path = [self.x, self.stop]
        self.box = (self.x + 15, self.y, 28, 64)
        self.health = 10
        self.see = True

    def draw(self, win):
        self.movement()
        if self.see == True:
            if self.walkCount + 1 >= 27:
                self.walkCount = 0
            if self.vel > 0:
                win.blit(self.walkRight[self.walkCount // 3], (self.x, self.y))
                self.walkCount += 1
            else:
                win.blit(self.walkLeft[self.walkCount // 3], (self.x, self.y))
                self.walkCount += 1
            self.box = (self.x + 15, self.y, 28, 64)
            pygame.draw.rect(win, (255, 0, 0), (self.box[0], self.box[1] - 20, 50, 10))
            pygame.draw.rect(win, (0, 255, 0), (self.box[0], self.box[1] - 20, 50 - (5 * (10 - self.health)), 10))
            #pygame.draw.rect(win, (255, 0, 0), self.box, 2)

    def movement(self):
        if self.vel > 0:
            if self.vel + self.x < self.path[1]:
                self.x += self.vel
            else:
                self.vel = self.vel * -1
                self.walkCount = 0
        else:
            if self.x - self.vel > self.path[0]:
                self.x += self.vel
            else:
                self.vel = self.vel * -1
                self.walkCount = 0
    def hit(self):
        if self.health > 0:
            self.health -= 5
        else:
            self.see = False
            ans = input("Try Again?: 1 = Yes 2 = No ")
            if ans == str("1"):
                print("Ok")
                self.health = 10
                self.see = True
            else:
                print("Goodbye")
                quit()
        pass

#Projectiles
class maBu(object):
    def __init__(self, x, y, radius, color, facing, cooldown = 200):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.facing = facing
        self.vel = 7 * facing

    def draw(self, win):
        pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)

#Drawing The Game
def redrawGameWindow():
    win.blit(backdrop, (0, 0))
    mc.draw(win)
    bad.draw(win)
    text = font.render(name, 1, (0, 0, 0))  # Arguments are: text, anti-aliasing, color
    win.blit(text, (390, 10))
    for magic in magicShot:
        magic.draw(win)

    pygame.display.update()

#Main Loop
mc = player(50, 675, 64, 64)
bad = enemy(600, 675, 64, 64, 900)
font = pygame.font.SysFont("comicsans", 30, True)
shootLoop = 0
shootTime = 0
magicShot = []
run = True
name = input("What is your name? ")
while run:
        clock.tick(27)

        if shootLoop > 0:
            shootLoop += 1
        if shootLoop > 75:
            shootLoop = 0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

        for magic in magicShot:
            if magic.y - magic.radius < bad.box[1] + bad.box[3] and magic.y + magic.radius > bad.box[1]:
                if magic.x + magic.radius > bad.box[0] and magic.x - magic.radius < bad.box[0] + bad.box[2]:
                    bad.hit()
                    magicShot.pop(magicShot.index(magic))
            if magic.x < 1440 and magic.x > 0:
                magic.x += magic.vel

            else:
                magicShot.pop(magicShot.index(magic))


        keys = pygame.key.get_pressed()
        if mc.left:
            facing = -1

        else:
            facing = 1
        if keys[pygame.K_SPACE] and shootLoop == 0:
            if len(magicShot) < 20:
                magicShot.append(maBu(round(mc.x + mc.width //2), round(mc.y + mc.height //2), 6, (75, 0, 130), facing))


            shootLoop = 1

        if keys[pygame.K_a] and mc.x > mc.vel:
            mc.x -= mc.vel
            mc.right = False
            mc.left = True
            mc.standing = False

        elif keys[pygame.K_d] and mc.x < 1440 - mc.width - mc.vel:
            mc.x += mc.vel
            mc.right = True
            mc.left = False
            mc.standing = False

        else:
            mc.standing = True
            mc.walkCount = 0

        if not(mc.isJump):
            if keys[pygame.K_w]:
                mc.isJump = True
                mc.right = False
                mc.left = False
                mc.walkCount = 0

        else:
            if mc.jumpCount >= -10:
                neg = 0.5
                if mc.jumpCount < 0:
                    neg = -0.5
                mc.y -= (mc.jumpCount ** 2) * 0.4 * neg
                mc.jumpCount -= 1

            else:
                mc.isJump = False
                mc.jumpCount = 10


        redrawGameWindow()

pygame.quit()
